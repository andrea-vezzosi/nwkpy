#!/usr/bin/env python3
"""
Script to compare NPY and PNG files
generated by different versions of a Python script.
"""

import os
import numpy as np
import hashlib
from PIL import Image
from pathlib import Path
import argparse

class MultiFormatComparator:
    def __init__(self, tolerance=1e-10):
        self.tolerance = tolerance
        self.results = {}
    
    def compare_files_by_extension(self, dir1, dir2, extensions=None):
        """Compare all files with specific extensions in two directories"""
        if extensions is None:
            extensions = ['.png', '.npy']
        
        dir1_path = Path(dir1)
        dir2_path = Path(dir2)
        
        # Find all files for each extension
        for ext in extensions:
            files1 = list(dir1_path.glob(f"*{ext}"))
            files2 = list(dir2_path.glob(f"*{ext}"))
            
            # Create mapping by filename
            files1_dict = {f.name: f for f in files1}
            files2_dict = {f.name: f for f in files2}
            
            # Find common files
            common_files = set(files1_dict.keys()) & set(files2_dict.keys())
            
            print(f"\n=== {ext.upper()} FILES COMPARISON ===")
            print(f"Files in {dir1}: {len(files1)}")
            print(f"Files in {dir2}: {len(files2)}")
            print(f"Common files: {len(common_files)}")
            
            for filename in sorted(common_files):
                file1 = files1_dict[filename]
                file2 = files2_dict[filename]
                result = self.compare_files(file1, file2)
                self.results[f"{filename}"] = result
                
                status = "✓ IDENTICAL" if result['identical'] else "✗ DIFFERENT"
                if not result['identical'] and result.get('functionally_equivalent'):
                    status = "≈ EQUIVALENT"
                
                print(f"  {filename}: {status}")
                if result.get('details'):
                    print(f"    {result['details']}")
    
    def compare_files(self, file1, file2):
        """Compare two files based on their extension"""
        ext1 = file1.suffix.lower()
        ext2 = file2.suffix.lower()
        
        if ext1 != ext2:
            return {'identical': False, 'details': f'Different extensions: {ext1} vs {ext2}'}
        
        if ext1 == '.npy':
            return self.compare_npy(file1, file2)
        elif ext1 == '.png':
            return self.compare_png(file1, file2)
        else:
            return self.compare_binary(file1, file2)
    
    def compare_npy(self, file1, file2):
        """Compare NumPy files considering numerical tolerances"""
        try:
            arr1 = np.load(file1, allow_pickle=True)
            arr2 = np.load(file2, allow_pickle=True)
            
            # Exact comparison
            if np.array_equal(arr1, arr2):
                return {'identical': True, 'details': 'Arrays are identical'}
            
            # If shapes are different, they are definitely different
            if arr1.shape != arr2.shape:
                return {
                    'identical': False, 
                    'details': f'Different shapes: {arr1.shape} vs {arr2.shape}'
                }
            
            # Compare with tolerance for float
            if arr1.dtype.kind in 'fc' and arr2.dtype.kind in 'fc':  # float or complex
                if np.allclose(arr1, arr2, rtol=self.tolerance, atol=self.tolerance):
                    max_diff = np.max(np.abs(arr1 - arr2))
                    return {
                        'identical': False, 
                        'functionally_equivalent': True,
                        'details': f'Equivalent within tolerance (max diff: {max_diff:.2e})'
                    }
            
            return {'identical': False, 'details': 'Arrays are different'}
            
        except Exception as e:
            return {'identical': False, 'details': f'Error: {str(e)}'}
    
    def compare_png(self, file1, file2):
        """Compare PNG images"""
        try:
            # First, compare quick hash
            hash1 = self.get_file_hash(file1)
            hash2 = self.get_file_hash(file2)
            
            if hash1 == hash2:
                return {'identical': True, 'details': 'Hashes are identical'}
            
            # Pixel-by-pixel comparison
            img1 = Image.open(file1)
            img2 = Image.open(file2)
            
            if img1.size != img2.size:
                return {
                    'identical': False, 
                    'details': f'Different dimensions: {img1.size} vs {img2.size}'
                }
            
            # Convert to numpy array for numerical comparison
            arr1 = np.array(img1)
            arr2 = np.array(img2)
            
            if np.array_equal(arr1, arr2):
                return {'identical': True, 'details': 'Pixels are identical'}
            
            # Compute mean difference
            diff = np.mean(np.abs(arr1.astype(float) - arr2.astype(float)))
            
            if diff < 1.0:  # Threshold for minimal differences
                return {
                    'identical': False,
                    'functionally_equivalent': True,
                    'details': f'Mean pixel difference: {diff:.3f}'
                }
            
            return {'identical': False, 'details': f'Mean pixel difference: {diff:.3f}'}
            
        except Exception as e:
            return {'identical': False, 'details': f'Error: {str(e)}'}
    
    def get_file_hash(self, filepath):
        """Compute MD5 hash of a file"""
        hash_md5 = hashlib.md5()
        with open(filepath, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    
    def print_summary(self):
        """Print summary of results"""
        total = len(self.results)
        identical = sum(1 for r in self.results.values() if r['identical'])
        equivalent = sum(1 for r in self.results.values() if r.get('functionally_equivalent', False))
        different = total - identical - equivalent
        
        print(f"\n=== SUMMARY ===")
        print(f"Total files compared: {total}")
        print(f"Identical: {identical}")
        print(f"Functionally equivalent: {equivalent}")
        print(f"Different: {different}")

def main():
    parser = argparse.ArgumentParser(description='Compare multi-format files')
    parser.add_argument('dir1', help='First directory')
    parser.add_argument('dir2', help='Second directory')
    parser.add_argument('--tolerance', type=float, default=1e-10, 
                        help='Tolerance for numerical comparisons')
    parser.add_argument('--extensions', nargs='+', default=['.png', '.npy', '.tex'],
                        help='Extensions to compare')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.dir1):
        print(f"Error: Directory {args.dir1} does not exist")
        return
    
    if not os.path.exists(args.dir2):
        print(f"Error: Directory {args.dir2} does not exist")
        return
    
    comparator = MultiFormatComparator(tolerance=args.tolerance)
    comparator.compare_files_by_extension(args.dir1, args.dir2, args.extensions)
    comparator.print_summary()

if __name__ == "__main__":
    main()